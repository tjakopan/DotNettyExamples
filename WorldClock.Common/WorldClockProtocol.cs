// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WorldClockProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WorldClock.Common {

  /// <summary>Holder for reflection information generated from WorldClockProtocol.proto</summary>
  public static partial class WorldClockProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for WorldClockProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldClockProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhXb3JsZENsb2NrUHJvdG9jb2wucHJvdG8SEVdvcmxkQ2xvY2suQ29tbW9u",
            "IiIKC1RpbWVab25lSWRzEhMKC3RpbWVab25lSWRzGAEgAygJIpsBCglMb2Nh",
            "bFRpbWUSDAoEeWVhchgBIAEoDRINCgVtb250aBgCIAEoDRISCgpkYXlPZk1v",
            "bnRoGAQgASgNEi8KCWRheU9mV2VlaxgFIAEoDjIcLldvcmxkQ2xvY2suQ29t",
            "bW9uLkRheU9mV2VlaxIMCgRob3VyGAYgASgNEg4KBm1pbnV0ZRgHIAEoDRIO",
            "CgZzZWNvbmQYCCABKA0iPgoKTG9jYWxUaW1lcxIwCgpsb2NhbFRpbWVzGAEg",
            "AygLMhwuV29ybGRDbG9jay5Db21tb24uTG9jYWxUaW1lKmcKCURheU9mV2Vl",
            "axIKCgZTVU5EQVkQABIKCgZNT05EQVkQARILCgdUVUVTREFZEAISDQoJV0VE",
            "TkVTREFZEAMSDAoIVEhVUlNEQVkQBBIKCgZGUklEQVkQBRIMCghTQVRVUkRB",
            "WRAGQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::WorldClock.Common.DayOfWeek), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WorldClock.Common.TimeZoneIds), global::WorldClock.Common.TimeZoneIds.Parser, new[]{ "TimeZoneIds_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WorldClock.Common.LocalTime), global::WorldClock.Common.LocalTime.Parser, new[]{ "Year", "Month", "DayOfMonth", "DayOfWeek", "Hour", "Minute", "Second" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WorldClock.Common.LocalTimes), global::WorldClock.Common.LocalTimes.Parser, new[]{ "LocalTimes_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DayOfWeek {
    [pbr::OriginalName("SUNDAY")] Sunday = 0,
    [pbr::OriginalName("MONDAY")] Monday = 1,
    [pbr::OriginalName("TUESDAY")] Tuesday = 2,
    [pbr::OriginalName("WEDNESDAY")] Wednesday = 3,
    [pbr::OriginalName("THURSDAY")] Thursday = 4,
    [pbr::OriginalName("FRIDAY")] Friday = 5,
    [pbr::OriginalName("SATURDAY")] Saturday = 6,
  }

  #endregion

  #region Messages
  public sealed partial class TimeZoneIds : pb::IMessage<TimeZoneIds> {
    private static readonly pb::MessageParser<TimeZoneIds> _parser = new pb::MessageParser<TimeZoneIds>(() => new TimeZoneIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeZoneIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WorldClock.Common.WorldClockProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeZoneIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeZoneIds(TimeZoneIds other) : this() {
      timeZoneIds_ = other.timeZoneIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeZoneIds Clone() {
      return new TimeZoneIds(this);
    }

    /// <summary>Field number for the "timeZoneIds" field.</summary>
    public const int TimeZoneIds_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_timeZoneIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> timeZoneIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TimeZoneIds_ {
      get { return timeZoneIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeZoneIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeZoneIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timeZoneIds_.Equals(other.timeZoneIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timeZoneIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      timeZoneIds_.WriteTo(output, _repeated_timeZoneIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += timeZoneIds_.CalculateSize(_repeated_timeZoneIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeZoneIds other) {
      if (other == null) {
        return;
      }
      timeZoneIds_.Add(other.timeZoneIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            timeZoneIds_.AddEntriesFrom(input, _repeated_timeZoneIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalTime : pb::IMessage<LocalTime> {
    private static readonly pb::MessageParser<LocalTime> _parser = new pb::MessageParser<LocalTime>(() => new LocalTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WorldClock.Common.WorldClockProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTime(LocalTime other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      dayOfMonth_ = other.dayOfMonth_;
      dayOfWeek_ = other.dayOfWeek_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      second_ = other.second_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTime Clone() {
      return new LocalTime(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private uint year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private uint month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "dayOfMonth" field.</summary>
    public const int DayOfMonthFieldNumber = 4;
    private uint dayOfMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DayOfMonth {
      get { return dayOfMonth_; }
      set {
        dayOfMonth_ = value;
      }
    }

    /// <summary>Field number for the "dayOfWeek" field.</summary>
    public const int DayOfWeekFieldNumber = 5;
    private global::WorldClock.Common.DayOfWeek dayOfWeek_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WorldClock.Common.DayOfWeek DayOfWeek {
      get { return dayOfWeek_; }
      set {
        dayOfWeek_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 6;
    private uint hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 7;
    private uint minute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 8;
    private uint second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (DayOfMonth != other.DayOfMonth) return false;
      if (DayOfWeek != other.DayOfWeek) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (Second != other.Second) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (DayOfMonth != 0) hash ^= DayOfMonth.GetHashCode();
      if (DayOfWeek != 0) hash ^= DayOfWeek.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Month);
      }
      if (DayOfMonth != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DayOfMonth);
      }
      if (DayOfWeek != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DayOfWeek);
      }
      if (Hour != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Minute);
      }
      if (Second != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Second);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
      }
      if (DayOfMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DayOfMonth);
      }
      if (DayOfWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DayOfWeek);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minute);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Second);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalTime other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.DayOfMonth != 0) {
        DayOfMonth = other.DayOfMonth;
      }
      if (other.DayOfWeek != 0) {
        DayOfWeek = other.DayOfWeek;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadUInt32();
            break;
          }
          case 16: {
            Month = input.ReadUInt32();
            break;
          }
          case 32: {
            DayOfMonth = input.ReadUInt32();
            break;
          }
          case 40: {
            dayOfWeek_ = (global::WorldClock.Common.DayOfWeek) input.ReadEnum();
            break;
          }
          case 48: {
            Hour = input.ReadUInt32();
            break;
          }
          case 56: {
            Minute = input.ReadUInt32();
            break;
          }
          case 64: {
            Second = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalTimes : pb::IMessage<LocalTimes> {
    private static readonly pb::MessageParser<LocalTimes> _parser = new pb::MessageParser<LocalTimes>(() => new LocalTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WorldClock.Common.WorldClockProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTimes(LocalTimes other) : this() {
      localTimes_ = other.localTimes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalTimes Clone() {
      return new LocalTimes(this);
    }

    /// <summary>Field number for the "localTimes" field.</summary>
    public const int LocalTimes_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::WorldClock.Common.LocalTime> _repeated_localTimes_codec
        = pb::FieldCodec.ForMessage(10, global::WorldClock.Common.LocalTime.Parser);
    private readonly pbc::RepeatedField<global::WorldClock.Common.LocalTime> localTimes_ = new pbc::RepeatedField<global::WorldClock.Common.LocalTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WorldClock.Common.LocalTime> LocalTimes_ {
      get { return localTimes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!localTimes_.Equals(other.localTimes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= localTimes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      localTimes_.WriteTo(output, _repeated_localTimes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += localTimes_.CalculateSize(_repeated_localTimes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalTimes other) {
      if (other == null) {
        return;
      }
      localTimes_.Add(other.localTimes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            localTimes_.AddEntriesFrom(input, _repeated_localTimes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
